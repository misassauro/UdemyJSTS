.texto {
    box-sizing: border-box; /*box-sizing: content-box - tudo que está relacionado a altura e largura será atribuído ao conteúdo. Margin, padding e border serão somados ao conteúdo, crescendo para fora.
    
    box-sizing: padding-box - o padding será acrescentado para dentro. Width e height vão incluir o tamanho do padding, mas não de border nem de margin.

    box-sizing: border-box - toda vez que falarmos de altura e largura, estaremos também falando de border e padding. Então, quando setamos 100px de largura, por exemplo, as medidas inseridas em border e padding serão inclusas de modo a haver realmente 100px de largura. Margin será o único a acrescentar tamanho para fora, o que faz muito mais sentido, haja vista que usamos a margem para distanciar um conteúdo de outros.

    É como já foi explicado na aula 07 de CSS Box-Model: o border-box serve para que as nossas definições de padding e border sejam levadas em conta no cálculo de width e height, não ultrapassando os valores determinados neles. Em outras palavras, os valores de padding e border irão compor os valores de width e height para seguir corretamente a configuração de tamanho de um elemento. Assim, será possível confiar que um elemento com 100px de largura e altura realmente terá esse tamanho.
    */
    display: block; /*Dizer isso é redundante, porque todas as divs, naturalmente, possuem seu display como block.*/
    background: red;
    width: 100%;
    height: 100%; /*Isso não costuma funcionar. Por isso colocamos html e body com height de 100%.*/
    max-width: 600px;
    max-height: 500px;
    min-width: 0;
    min-height: 100px;
    overflow: auto;
    margin: 0 auto 50px auto; /*O para cima e baixo e auto para esquerda e direita, se ajustando automaticamente à largura da tela.*/
    padding: 50px; /*Enchimento de 50px*/
    border: 5px solid black;
} /*Caso o display seja colocado como inline, ele não sofre alterações de tamanho nem de cor. Ele deixa de ser um bloco e passa a ser encarado como uma coisa só.

Em uma width e height de 200px, o conteúdo dentro de .texto passe para fora da div. É possível mudar isso usando a propriedade overflow: hidden, que faz com que o conteúdo que excede os limites da div seja escondido (isso não significa que ele não está na página) Podemos escolher o eixo do overflow, sendo x (horizontal) ou y (vertical). Usando overflow-y: scroll, quando houver conteúdo excedente, uma barra deslizante surgirá e permitirá visualizar o restante do conteúdo. Porém, mesmo que não haja conteúdo excedente, essa barra aparecerá. Usando "overflow-y: auto" a barra aparecerá somente quando o conteúdo passar dos limites de tamanho da div.

Max/min-widht/height: essas propriedades permitem o site ter maior responsividade.

width: 100%;
max-width: 600px; 

Com a configuração acima, o conteúdo da página abrangerá 100% da tela, crescendo até que alcance 900px, que é a largura máxima determinada. Depois disso, o conteúdo não irá mais crescer de acordo com o tamanho da tela.

Quando colocamos a max-height como 100%, a div irá ocupar o máximo do viewport (porção visível do site. Ao redimensionar o browser para um tamanho menor, por exemplo, a viewport, consequentemente, será menor). Porém, se setamos a altura máxima como 500px, a div não irá passar de 500px.
*/

html, body {
    height: 100%; /*Essa é uma forma de setar a altura do conteúdo para 100%. Diretamente em .texto seria impossível por conta de outras propriedades que seguram a div em uma altura específica.*/
}

.semconteudo {
    background: blue; /*Essa div, por não ter conteúdo, ainda que esteja configurada com um fundo azul, este não aparece. No entanto, se setamos um min-height, o fundo aparecerá.*/
    min-height: 100px;
    max-width: 500px;
    margin: 50px auto 0 auto;
}